# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: QA Test

on:
  push:
    branches:
      - feature/*
      - hotfix/*
      - fix/*
      - main
      - '*'

jobs:

  black:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install Black
        run: pip install git+https://github.com/psf/black
      - name: Run black --check .
        run: black --check -l 100 .

  flake8:
    needs: black
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          pip install flake8
      - name: flake8
        run: |
          flake8 . --exclude=addons_external,*.pyc,.github,__init__.py --max-line-length=100 --extend-ignore=F401,F811,E203 --statistics

  pylint:
    needs: black
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          pip install pylint
      - name: PyLint
        run: |
          pylint ./**/*.py --rcfile ./config/pylint.cfg --fail-under 10 --ignore-patterns=.github
  
  hadolint:
    name: Hadolint
    needs: [pylint,flake8, black]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        Dockerfile: [Hadolint]
    steps:
      - uses: actions/checkout@v2 
      - uses: hadolint/hadolint-action@v2.0.0
        with:
          dockerfile: Dockerfile
          ignore: DL3002
  build:
    name: SonarQube
    needs: [pylint,flake8, black]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
              -Dsonar.python.coverage.reportPaths=coverage.xml
              -Dsonar.verbose=true
              -Dsonar.exclusions=**/__manifest__.py
              -Dsonar.python.version=3.9
      - uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  Docker:
    needs: [hadolint, build]
    runs-on: ubuntu-latest
    steps:
    - name: Git variables
      id: extract_branch
      shell: bash
      run: |
        echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        echo "::set-output name=sha_short::$(echo $GITHUB_SHA | cut -c1-7)"
    - name: Check outputs
      run: | 
        echo ${{ steps.extract_branch.outputs.branch }}
        echo ${{ steps.extract_branch.outputs.sha_short }}
    - name: Get Time
      id: time
      uses: nanzm/get-time-action@v1.1
      with:
        timeZone: 8
        format: 'YYYYMMDDHHmm'
    - name: Checkout
      uses: actions/checkout@v2
   
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: sa-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push docker image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        IMAGE_TAG: arba-padron-${{ steps.extract_branch.outputs.sha_short }}-${{ steps.time.outputs.time }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    - name: Log out of Amazon ECR
      if: always()
      run: docker logout ${{ steps.login-ecr.outputs.registry }}